training   <- training[inTrain,]
set.seed(123)
treeModel <- train(Survived ~ ., data = training, method = "rpart")
predicted <- predict(treeModel, newdata = validation)
treeConfMtx <- confusionMatrix(predicted, validation$Survived)
treeConfMtx
print(treeModel)
plot(treeModel)
fancyRpartPlot(treeModel$finalModel, sub = "Prediction tree")
set.seed(123)
rfModel <- train(Survived ~ ., data = training, method = "rf")
predicted <- predict(rfModel, newdata = validation)
rfConfMtx <- confusionMatrix(predicted, validation$Survived)
rfConfMtx
print(rfModel)
plot(rfModel)
set.seed(123)
metric <- "Accuracy"
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="random")
mtry <- sqrt(ncol(training))
tunegrid <- expand.grid(.mtry=mtry)
rf_random <- train(Survived~., data=training, method="rf", metric=metric, tuneLength=15, trControl=control)
print(rf_random)
plot(rf_random)
set.seed(123)
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(.mtry=c(1:15))
rf_gridsearch <- train(Survived~., data=training, method="rf", metric=metric, tuneGrid=tunegrid, trControl=control)
print(rf_gridsearch)
plot(rf_gridsearch)
set.seed(123)
ldaModel <- train(Survived ~ ., data = training, method="lda")
glmModel <- glm(Survived ~ ., data = training, family = "binomical")
glmModel <- glm(Survived ~ ., data = training, family = "binomial")
summary(glmModel)
predicted <- predict(glmModel, newdata = validation)
confusionMatrix(predicted, validation$Survived)
head(predicted)
glmModel <- glm(I(Survived) ~ ., data = training, family = "binomial")
summary(glmModel)
predicted <- predict(glmModel, newdata = validation)
confusionMatrix(predicted, validation$Survived)
head(predicted)
glmModel <- lm(I(Survived) ~ ., data = training)
glmModel <- lm(Survived ~ ., data = training)
control <- trainControl(method="repeatedcv", number=10, repeats=3, search="grid")
tunegrid <- expand.grid(interaction.depth = 1:5,
n.trees = (1:5)*100,
shrinkage = 10 ** (-1:-3),
n.minobsinnode = 20)
gbm_gridsearch <- train(Survived~., data=training, method="gbm", metric=metric, tuneGrid=tunegrid, trControl=control, verbose = FALSE)
gbm_gridsearch <- train(Survived~Sex + PClass + AgeGroup + Family, data=training, method="gbm", metric=metric, tuneGrid=tunegrid, trControl=control, verbose = FALSE)
gbm_gridsearch <- train(Survived~Sex + PClass + AgeGroup + Family, data=training, method="gbm", metric=metric, tuneGrid=tunegrid, trControl=control, verbose = FALSE)
gbm_gridsearch <- train(Survived~Sex + Pclass + AgeGroup + Family, data=training, method="gbm", metric=metric, tuneGrid=tunegrid, trControl=control, verbose = FALSE)
print(gbm_gridsearch)
plot(gbm_gridsearch)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)
library(gbm)
#Set seed
set.seed(753)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
summary(training)
#Imputing NAs into Age variable
training$Age[is.na(training$Age)] = median(training$Age, na.rm = TRUE)
summary(training)
#Remove some variables
training <- training %>%
select(-PassengerId, -Name, -Ticket)
#Remove some variables
training <- training %>%
select(c(-PassengerId, -Name, -Ticket))
summary(training)
#Remove some variables
training <- training %>%
select(-PassengerId, -Name, -Ticket)
#Remove some variables
training <- training %>%
select(-Name, -Ticket, -PassengerId)
library(dplyr)
#Remove some variables
training <- training %>%
select(-Name, -Ticket, -PassengerId)
#Remove some variables
training <- training %>%
dplyr::select(-Name, -Ticket, -PassengerId)
set.seed(123)
inTrain <- createDataPartition(training$Survived, p = .6, list = FALSE)
validation <- training[-inTrain,]
training   <- training[inTrain,]
set.seed(123)
summary(linModel)
linModel <- lm(Survived ~ ., data = training)
summary(linModel)
#Set seed
set.seed(753)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
summary(training)
#Imputing NAs into Age variable
training$Age[is.na(training$Age)] = median(training$Age, na.rm = TRUE)
summary(training)
#Remove some variables
training <- training %>%
dplyr::select(-Name, -Ticket, -PassengerId)
set.seed(123)
inTrain <- createDataPartition(training$Survived, p = .6, list = FALSE)
validation <- training[-inTrain,]
training   <- training[inTrain,]
set.seed(123)
linModel <- lm(Survived ~ ., data = training)
summary(linModel)
predicted <- predict(linModel, newdata = validation)
ldaModel <- train(Survived ~ ., data = training, method="lda")
set.seed(123)
treeModel <- train(Survived ~ ., data = training, method = "rpart")
treeModel <- train(Survived ~ ., data = training, method = "rpart")
predicted <- predict(treeModel, newdata = validation)
treeModel <- train(Survived ~ ., data = training, method = "rpart")
treeModel <- train(as.factor(Survived) ~ ., data = training, method = "rpart")
treeModel <- train(as.factor(Survived) ~ ., data = training, method = "rpart")
predicted <- predict(treeModel, newdata = validation)
treeConfMtx <- confusionMatrix(predicted, as.factor(validation$Survived))
treeConfMtx
print(treeModel)
plot(treeModel)
fancyRpartPlot(treeModel$finalModel, sub = "Prediction tree")
install.packages("mlr")
knitr::opts_chunk$set(echo = TRUE)
library(mlr)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
summarizeColumns(training)
training$Survived <- as.factor(training$Survived)
summarizeColumns(training)
training$Pclass <- as.factor(training$Pclass)
imp_train <- imput(training, classes = list(factor = imputeMode(), integer = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(test, classes = list(factor = imputeMode(), integer = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
testing$Pclass <- as.factor(testing$Pclass)
training$Survived <- as.factor(training$Survived)
training$Pclass <- as.factor(training$Pclass)
testing$Pclass <- as.factor(testing$Pclass)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
training$Survived <- as.factor(training$Survived)
training$Pclass <- as.factor(training$Pclass)
testing$Pclass <- as.factor(testing$Pclass)
summarizeColumns(training)
summarizeColumns(testing)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
summarizeColumns(training)
summarizeColumns(testing)
summarizeColumns(training)
summarizeColumns(testing)
summarizeColumns(training)
training <- imp_train$data
testing  <- imp_test$data
summarizeColumns(training)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
training <- imp_train$data
summarizeColumns(training)
summarizeColumns(testing)
summarizeColumns(training)
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
testing  <- imp_test$data
summarizeColumns(testing)
# Additional features
training <- training %>%
mutate(Survived = as.factor(Survived),
Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = grepl("[0-9]+", Cabin),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch, IsFamily = Family > 0)
testing <- testing %>%
mutate(Survived = as.factor(Survived),
Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = grepl("[0-9]+", Cabin),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch, IsFamily = Family > 0)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = grepl("[0-9]+", Cabin),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch, IsFamily = Family > 0)
summarizeColumns(training)
summarizeColumns(testing)
# Remove some featires
training <- training %>%
select(-PassengerId, -Name, -Ticket)
# Remove some featires
training <- training %>%
dplyr::select(-PassengerId, -Name, -Ticket)
testing_ids <- testing$PassengerId
testing <- testing %>%
dplyr::select( -Name, -Ticket)
summarizeColumns(training)
summarizeColumns(testing)
trainTask <- createTask(data = training, target = "Survived")
trainTask <- makeClassifTask(data = training, target = "Survived")
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
training$Survived <- as.factor(training$Survived)
training$Pclass <- as.factor(training$Pclass)
testing$Pclass <- as.factor(testing$Pclass)
summarizeColumns(training)
summarizeColumns(testing)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
training <- imp_train$data
testing  <- imp_test$data
summarizeColumns(training)
summarizeColumns(testing)
# Additional features
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0))
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0))
# Remove some featires
training <- training %>%
dplyr::select(-PassengerId, -Name, -Ticket)
testing_ids <- testing$PassengerId
testing <- testing %>%
dplyr::select( -Name, -Ticket)
set.seed(123)
inTrain <- createDataPartition(training$Survived, p = .6, list = FALSE)
validation <- training[-inTrain,]
training   <- training[inTrain,]
trainTask <- makeClassifTask(data = training, target = "Survived")
summary(training)
levels(training)
levels(training$Cabin)
validTask <- makeClassifTask(data = validation, target = "Survived")
trainTask
validTask
levels(training$Survived)
trainTask <- makeClassifTask(data = training, target = "Survived", positive = "1")
validTask <- makeClassifTask(data = validation, target = "Survived", positive = "1")
testing <- testing %>%
mutate(Survived = NULL)
testing$Survived = as.factor(testing$Survived)
testing <- testing %>%
mutate(Survived = factor(leves=c("0","1")))
testing <- testing %>%
mutate(Survived = factor(levels=c("0","1")))
testing <- testing %>%
mutate(Survived = factor(x = 0,levels=c("0","1")))
testing <- testing %>%
mutate(Survived = factor(x = NULL,levels=c("0","1")))
testing <- testing %>%
mutate(Survived = factor(x = 0,levels=c("0","1")))
testTask  <- makeClassifTask(data = testing, target = "Survived", positive = "1")
testing <- testing %>%
mutate(Survived = factor(x = 0,levels=c("1","2")))
testing <- testing %>%
mutate(Survived = factor(x = 0,levels=c("0","1")))
testTask  <- makeClassifTask(data = testing, target = "Survived", positive = "1")
testTask  <- makeClassifTask(data = testing, target = "Survived")
levest(testing$Survived)
levelt(testing$Survived)
levels(testing$Survived)
levels(training$Survived)
head(testing$Survived)
head(training$Survived)
testTask  <- makeClassifTask(data = testing, target = "Survived", positive = "1")
testTask  <- makeClassifTask(data = testing, target = "Survived")
testTask
validTask <- normalizeFeatures(validTask,method = "standardize")
trainTask <- normalizeFeatures(trainTask,method = "standardize")
summarizeColumns(trainTask)
im_feat <- generateFilterValuesData(trainTask, method = c("information.gain","chi.squared"))
install.packages("FSelector")
library(FSelector)
library(rJava)
library(rJava)
library(FSelector)
im_feat <- generateFilterValuesData(trainTask, method = c("information.gain","chi.squared"))
plotFilterValues(im_feat,n.show = 20)
qda.learner <- makeLearner("classif.qda", predict.type = "response")
qdaModel <- train(qda.learner, trainTask)
qpredict <- predict(qmodel, testTask)
qdaModel <- train(qda.learner, trainTask)
makeatree <- makeLearner("classif.rpart", predict.type = "response")
set_cv <- makeResampleDesc("CV",iters = 3L)
gs <- makeParamSet(
makeIntegerParam("minsplit",lower = 10, upper = 50),
makeIntegerParam("minbucket", lower = 5, upper = 50),
makeNumericParam("cp", lower = 0.001, upper = 0.2)
)
gscontrol <- makeTuneControlGrid()
stune <- tuneParams(learner = makeatree,
resampling = set_cv,
task = trainTask,
par.set = gs,
control = gscontrol,
measures = acc)
#check best parameter
stune$x
#cross validation result
stune$y
#using hyperparameters for modeling
t.tree <- setHyperPars(makeatree, par.vals = stune$x)
#train the model
t.rpart <- train(t.tree, trainTask)
getLearnerModel(t.rpart)
#make predictions
tpmodel_val <- predict(t.rpart, validTask)
tpmodel <- predict(t.rpart, testTask)
trainTask <- makeClassifTask(data = training, target = "Survived", positive = "1")
trainTask <- makeClassifTask(data = training, target = "Survived", positive = "1", fixup.data = "no")
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
training$Survived <- as.factor(training$Survived)
training$Pclass <- as.factor(training$Pclass)
testing$Pclass <- as.factor(testing$Pclass)
summarizeColumns(training)
summarizeColumns(testing)
summary(training)
library(dummies)
install.packages("dummies")
summary(training)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
training <- imp_train$data
testing  <- imp_test$data
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select( -Name, -Ticket)
summarizeColumns(training)
summarizeColumns(testing)
# Additional features
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0))
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0))
# Remove some featires
training <- training %>%
dplyr::select(-PassengerId, -Name, -Ticket)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
training <- imp_train$data
testing  <- imp_test$data
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select( -Name, -Ticket, -Cabin)
summarizeColumns(training)
summarizeColumns(testing)
levels(training$AgeGroup)
levels(testing$AgeGroup)
training <- cbind(training, dummy(training$Deck, sep = "_"))
library(dummies)
training <- cbind(training, dummy(training$Deck, sep = "_"))
summary(training)
testing  <- read.csv("test.csv", header = TRUE)
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = levels((training$AgeGroup))),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = levels(training$AgeGroup)),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select( -Name, -Ticket, -Cabin)
levels(training$AgeGroup)
levels(testing$AgeGroup)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
training <- imp_train$data
testing  <- imp_test$data
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = 5),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
levels(training$AgeGroup)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = levels(training$AgeGroup)),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select( -Name, -Ticket, -Cabin)
levels(testing$AgeGroup)
testing  <- imp_test$data
x <- training$Age
y <- testing$Age
x_cut <- cut(x, breaks = 5)
table(x_cut)
y_cut <- cut(y, breaks = 5)
y_cut
table(x_cut)
table(y_cut)
class(x_cut)
x_int <- findInterval(x)
x_int <- findInterval(x, vec=5)
table(x_int)
x_cut2 <- cut(x, breaks = quantiles(x))
x_cut2 <- cut(x, breaks = quantile(x))
table(x_cut2)
y_cut2 <- cut(y, breaks = quantile(x))
table(y_cut)
table(y_cut2)
training <- imp_train$data
testing  <- imp_test$data
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = quantile(Age)),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = quantile(training$Age)),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select( -Name, -Ticket, -Cabin)
training <- cbind(training, dummy(training$Deck, sep = "_"))
summary(training)
training <- imp_train$data
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
AgeGroup = cut(Age, breaks = quantile(Age)),
Family = SibSp + Parch,
IsFamily = as.factor(Family > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
training <- cbind(training,
dummy(training$Deck, sep = "_"),
dummy(training$Sex, sep = "_"),
dummy(training$HasCabin, sep = "_"),
dummy(training$AgeGroup, sep = "_"))
summary(training)
