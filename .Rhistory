library(help = "datasets")
data(sleep)
str(sleep)
str(trees)
str(volcano)
str(WWWusage)
str(Orange)
View(Orange)
hist(Orange$age)
setwd("f:/work/R/Tita")
setwd("f:/work/R/Titanic")
knitr::opts_chunk$set(echo = TRUE)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
library(dplyr)
library(mlr)
library(rJava)
library(FSelector)
library(dummies)
library(caret)
library(rpart)
library(xgboost)
# Load training and test datasets
training <- read.csv("train.csv", header = TRUE)
testing  <- read.csv("test.csv", header = TRUE)
imp_train <- impute(training, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
imp_test <- impute(testing, classes = list(factor = imputeMode(), integer = imputeMean(), numeric = imputeMean()), dummy.classes = c("integer","factor"), dummy.type = "numeric")
training <- imp_train$data
testing  <- imp_test$data
training <- training %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
IsFamily = as.factor(SibSp + Parch > 0)) %>%
dplyr::select(-PassengerId, -Name, -Ticket, -Cabin)
testing <- testing %>%
mutate(Deck = as.factor(substr(as.character(Cabin), 0, 1)),
HasCabin = as.factor(grepl("[0-9]+", Cabin)),
IsFamily = as.factor(SibSp + Parch > 0)) %>%
dplyr::select( -Name, -Ticket, -Cabin)
training <- dummy.data.frame(training)
testing  <- dummy.data.frame(testing)
testing_ids <- testing$PassengerId
training_dum <- training
testing_dum <- testing
training$Survived <- as.factor(training$Survived)
testing  <- testing %>% mutate(Survived = factor(0, levels = c("0","1")))
summarizeColumns(training)
summarizeColumns(testing)
train_log <- read.csv("training_table.csv")
x <- train_log[train_log$Acc = max(train_log$Acc),]
x <- train_log[train_log$Acc == max(train_log$Acc),]
head(x)
train_xgb_matrix = xgb.DMatrix(data = as.matrix(dplyr::select(training, -Survived)),
label = as.numeric(training$Survived) - 1)
set.seed(123)
train_xgb_matrix = xgb.DMatrix(data = as.matrix(dplyr::select(training, -Survived)),
label = as.numeric(training$Survived) - 1)
#test_xgb_matrix  = xgb.DMatrix(data = as.matrix(dplyr::select(validation, -Survived)),
#                               label = as.numeric(validation$Survived) - 1)
test_xgb_matrix = train_xgb_matrix
watchlist <- list(train = train_xgb_matrix, test=test_xgb_matrix)
bst <- xgb.train(data=train_xgb_matrix, max.depth=23:26, eta=1, nthread = 2, nround=100, watchlist=watchlist, eval.metric = "error", objective = "binary:logistic")
bst
summary(bst)
prediction <- as.numeric(predict(bst, as.matrix(dplyr::select(testing, -Survived))) > .5)
res <- data.frame(PassengerId = testing_ids, Survived = prediction)
# bst <- xgb.train(data=train_xgb_matrix, max.depth=23:26, eta=1, nthread = 2, nround=100, watchlist=watchlist, eval.metric = "error", objective = "binary:logistic")
params = list(
max.depth = 20:29,
nthread   = 2,
eta       = 0.09
)
bst <- xgboos(data = train_xgb_matrix, params = params, nround = 2:10)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10,  early.stop.round = 100:110)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10,  early.stop.round = 100:110, maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10, max.depth = 20:29  early.stop.round = 100:110, maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10, max.depth = 20:29,  early.stop.round = 100:110, maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10, max.depth = 20:29,  early.stop.round = 100:110, maximize = FALSE)
bst <- xgboost(data = train_xgb_matrix, params = params, nround = 2:10, max.depth = 20:29,  early.stop.round = 100:110, maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix, nround = 2:10, max.depth = 20:29,  early.stop.round = 100:110, maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix,
nround = 2:10,
max.depth = 20:29,
early.stop.round = 100:110,
eta = 0.09,
maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix,
nround = 2:10,
max.depth = 20:29,
early.stop.round = 100:110,
eval_metric=evalerror,
eta = 0.09,
maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix,
nround = 2:10,
max.depth = 20:29,
early.stop.round = 100:110,
eval.metric="accuracy",
eta = 0.09,
maximize = TRUE)
bst <- xgboost(data = train_xgb_matrix,
nround = 2:10,
max.depth = 20:29,
early.stop.round = 100:110,
eval.metric="accuracy",
eta = 0.09)
bst <- xgboost(data = train_xgb_matrix,
nround = 2:10,
max.depth = 20:29,
early.stop.round = 100:110,
eval.metric="accuracy",
eta = 0.09,
eval.metric="rmse")
bst <- xgboost(data = train_xgb_matrix,
nround = 2:10,
max.depth = 20:29,
early.stop.round = 100:110,
eval.metric="accuracy",
eta = 0.09,
eval.metric="rmse",
maximize=TRUE)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=0.09,
gamma=0,
max_depth=26,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 150,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100:150,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 150,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
bst <- xgb.train (params = params,
data = train_xgb_matrix,
nrounds = 13,
watchlist = watchlist,
print.every.n = 10,
early.stop.round = 100,
maximize = F ,
eval_metric = "error")
prediction <- as.numeric(predict(bst, as.matrix(dplyr::select(testing, -Survived))) > .5)
res <- data.frame(PassengerId = testing_ids, Survived = prediction)
head(res)
write.csv("submission3.csv", sep=",")
write.csv(res, "submission3.csv", sep=",")
write.csv(res, "submission3.csv", sep=",", row.names = FALSE)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=seq(.01, .09, by = .01),
gamma=0,
max_depth=26,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 150,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=seq(.01, .09, by = .01),
gamma=0,
max_depth=20:30,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 150,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
min(xgbcv$test.error.mean)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 10:150,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 10,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 1000,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 1000,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 1000,
maximize = F)
params <- list(booster = "dart",
objective = "binary:logistic",
eta=seq(.01, .09, by = .01),
gamma=0,
max_depth=20:30,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 1000,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 1000,
maximize = F)
params <- list(booster = "gblinear",
objective = "binary:logistic",
eta=seq(.01, .09, by = .01),
gamma=0,
max_depth=20:30,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 1000,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 1000,
maximize = F)
params <- list(booster = "gblinear",
objective = "binary:logistic",
eta=seq(.01, .09, by = .01),
gamma=0,
max_depth=29,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 1000,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 1000,
maximize = F)
params <- list(booster = "gblinear",
objective = "binary:logistic",
eta=.09,
gamma=0,
max_depth=29,
min_child_weight=1,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 1000,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 1000,
maximize = F)
summary(xgbcv)
print(xgbcv)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 100,
nfold = 5,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 100,
nfold = 10,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
params <- list(booster = "gblinear",
objective = "binary:logistic",
eta=.09,
gamma=0,
max_depth=29,
min_child_weight=0.01,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 100,
nfold = 10,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=.09,
gamma=0,
max_depth=29,
min_child_weight=0.01,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 100,
nfold = 10,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 100,
nfold = 10,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 200,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 200,
nfold = 10,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 200,
maximize = F)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 200,
nfold = 20,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 200,
maximize = F)
params <- list(booster = "gbtree",
objective = "binary:logistic",
eta=.095,
gamma=0,
max_depth=29,
min_child_weight=0.01,
subsample=1,
colsample_bytree=1)
xgbcv <- xgb.cv( params = params,
data = train_xgb_matrix,
nrounds = 100,
nfold = 10,
showsd = T,
stratified = T,
print.every.n = 10,
early.stop.round = 100,
maximize = F)
xgbcv[60:70,]
bst <- xgb.train (params = params,
data = train_xgb_matrix,
nrounds = 62,
watchlist = watchlist,
print.every.n = 10,
early.stop.round = 100,
maximize = F ,
eval_metric = "error")
bst <- xgb.train (params = params,
data = train_xgb_matrix,
nrounds = 63,
watchlist = watchlist,
print.every.n = 10,
early.stop.round = 100,
maximize = F ,
eval_metric = "error")
bst <- xgb.train (params = params,
data = train_xgb_matrix,
nrounds = 70,
watchlist = watchlist,
print.every.n = 10,
early.stop.round = 100,
maximize = F ,
eval_metric = "error")
bst <- xgb.train (params = params,
data = train_xgb_matrix,
nrounds = 100,
watchlist = watchlist,
print.every.n = 10,
early.stop.round = 100,
maximize = F ,
eval_metric = "error")
prediction <- as.numeric(predict(bst, as.matrix(dplyr::select(testing, -Survived))) > .5)
res <- data.frame(PassengerId = testing_ids, Survived = prediction)
write.csv(res, "submission3.csv", sep=",", row.names = FALSE)
